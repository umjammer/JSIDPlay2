WhatsSID tune recognition with JSIDPlay2Server and MySQL:
=========================================================

Configure database:
-------------------
mysql_secure_installation
sudo mysql
CREATE USER 'newuser'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';
GRANT CREATE, ALTER, DROP, INSERT, UPDATE, INDEX, DELETE, SELECT, REFERENCES, RELOAD on *.* TO 'newuser'@'localhost' WITH GRANT OPTION;

Start/Stop/Restart Database:
----------------------------
sudo /etc/init.d/mysql start
sudo /etc/init.d/mysql stop
sudo /etc/init.d/mysql restart

Start command-line database tool:
---------------------------------
mysql -u newuser -p
Password: ***

Check, if database engine is innodb or mysam:
---------------------------------------------
SHOW DATABASES;
USE hvsc81;
SHOW TABLE STATUS WHERE `Name` = 'HashTable';

Estimate innodb_buffer_pool_size (check database size):
-------------------------------------------------------
SELECT table_schema, sum( data_length + index_length ) / 1024 / 1024 "Speicherbedarf (MB)" FROM information_schema.TABLES GROUP BY table_schema;

Check innodb buffer variables:
------------------------------
show variables like 'innodb_buffer%';

Set recommended MySQL Database settings for WhatsSID:
-----------------------------------------------------
sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf

port            = 3306
max_allowed_packet      = 64M
innodb_buffer_pool_size = 16G
sql-mode                = "ANSI_QUOTES"
wait_timeout = 500
interactive_timeout = 500

Show current database connections:
----------------------------------
SHOW PROCESSLIST;

Get estimate row count of database:
-----------------------------------
select  table_rows
from    information_schema.tables
where   table_schema = 'hvsc81'
  and   table_name = 'HashTable' ;

Faster database warm-up phase:
------------------------------
SET GLOBAL innodb_buffer_pool_dump_at_shutdown = ON
SET GLOBAL innodb_buffer_pool_load_at_startup = ON;

Show current status of innodb_buffer_pool_load_at_startup:
----------------------------------------------------------
SHOW STATUS LIKE 'Innodb_buffer_pool_load_status';

Remove old database:
--------------------
DROP DATABASE hvsc80;
sudo rm -rf /var/lib/mysql/hvsc80		# remove remaining (non-database table) files

Check numbers of SIDs:
======================
SELECT count(DISTINCT InfoDir) FROM "MusicInfo"

For databases caching execution plans (Oracle and SQLServer):
=============================================================
Set hibernate.query.in_clause_parameter_padding to true in persistence.xml

As you can see, this drastically reduces the number of different statements that your database needs to analyze. This improves the effectiveness of the database-internal cache and can improve the performance of your queries.
When not to use it

Parameter padding might seem like a great feature but there are a few situations in which you should avoid it:

    If your database doesnâ€™t cache execution plans, you will not benefit from reducing the number of different statements. The additional bind parameters then only increase the complexity of the statement and might slow down the query.
    If your List contains only a very small number of elements, the parameter padding will not have a huge effect and you might consider deactivating it.
    If your List contains a very large number of elements, parameter padding might drastically increase the number of parameters in your IN clause. A List with 129 elements, for example, gets padded to 256 parameters. In these situations, you should check if the overhead of the padded parameters starts to outweigh the benefits of the more efficient database cache.
    